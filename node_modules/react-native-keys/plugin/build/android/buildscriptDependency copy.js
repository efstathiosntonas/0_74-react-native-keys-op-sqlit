"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAndroidBuildscriptDependency = void 0;
const config_plugins_1 = require("@expo/config-plugins");
function applyImplementation(appBuildGradle) {
    var _a;
    const RnkeysImplementation = `
project.ext.keyFiles = [
  development: "keys.development.json",
  production: "keys.production.json",
  staging: "keys.staging.json"
]
apply from: project(':react-native-keys').projectDir.getPath() + "/RNKeys.gradle"
  `;
    if (!appBuildGradle.includes(RnkeysImplementation)) {
        const reactNative71Include = (_a = appBuildGradle.match(/def enableProguardInReleaseBuilds.+/)) === null || _a === void 0 ? void 0 : _a[0];
        if (reactNative71Include && appBuildGradle.includes(reactNative71Include)) {
            return appBuildGradle.replace(reactNative71Include, `${reactNative71Include}\n${RnkeysImplementation}`);
        }
    }
    return appBuildGradle;
}
const withAndroidBuildscriptDependency = (config) => {
    return (0, config_plugins_1.withAppBuildGradle)(config, (config) => {
        config.modResults.contents = applyImplementation(config.modResults.contents);
        return config;
    });
};
exports.withAndroidBuildscriptDependency = withAndroidBuildscriptDependency;
